# DISCLAIMER by default, bash will count all the characters in the $PS1 variable to determine line length 
# (including hidden characters) In order to mitigate that, we need to 'hide' the hidden characters in \[ \]
# braces.  I couldn't find a good way to do that in functions since \[ and \] kept showing up in my prompt
# Instead I changed the model of how the prompt was created into many functions.
txtblk='\[\e[0;30m\]' # Black - Regular
txtred='\[\e[0;31m\]' # Red
txtgrn='\[\e[0;32m\]' # Green
txtylw='\[\e[0;33m\]' # Yellow
txtblu='\[\e[0;34m\]' # Blue
txtpur='\[\e[0;35m\]' # Purple
txtcyn='\[\e[0;36m\]' # Cyan
txtwht='\[\e[0;37m\]' # White
 
bldblk='\[\e[1;30m\]' # Black - Bold
bldred='\[\e[1;31m\]' # Red
bldgrn='\[\e[1;32m\]' # Green
bldylw='\[\e[1;33m\]' # Yellow
bldblu='\[\e[1;34m\]' # Blue
bldpur='\[\e[1;35m\]' # Purple
bldcyn='\[\e[1;36m\]' # Cyan
bldwht='\[\e[1;37m\]' # White
 
unkblk='\[\e[4;30m\]' # Black - Underline
undred='\[\e[4;31m\]' # Red
undgrn='\[\e[4;32m\]' # Green
undylw='\[\e[4;33m\]' # Yellow
undblu='\[\e[4;34m\]' # Blue
undpur='\[\e[4;35m\]' # Purple
undcyn='\[\e[4;36m\]' # Cyan
undwht='\[\e[4;37m\]' # White
 
bakblk='\[\e[40m\]'   # Black - Background
bakred='\[\e[41m\]'   # Red
badgrn='\[\e[42m\]'   # Green
bakylw='\[\e[43m\]'   # Yellow
bakblu='\[\e[44m\]'   # Blue
bakpur='\[\e[45m\]'   # Purple
bakcyn='\[\e[46m\]'   # Cyan
bakwht='\[\e[47m\]'   # White
 
txtrst='\[\e[0m\]'    # Text Reset

bash_user() {
  printf "%s" "$USER"
}
BASH_USER="$txtred$(bash_user)"

bash_dir() {
  printf "%s" "$PWD"
}
BASH_DIR="$bldgrn\$(bash_dir)"

# Git info
source $DOTFILES_INSTALL_DIR/git_status

bash_git_branch() {
  if [ $(in_git_repo) ]; then
    printf " (%s) " "$(git_branch)"
  fi
}
BASH_GIT_BRANCH="$bldwht\$(bash_git_branch)"

bash_git_in_merge() {
  if [ $(in_git_repo) ] && [ $(git_in_merge) ]; then
    printf "x"
  fi
}
BASH_GIT_IN_MERGE="$bldred\$(bash_git_in_merge)"

bash_git_in_rebase() {
  if [ $(in_git_repo) ] && [ $(git_in_rebase) ]; then
    printf "x"
  fi
}
BASH_GIT_IN_REBASE="$bldylw\$(bash_git_in_rebase)"

bash_git_has_stashed_commit() {
  if [ $(in_git_repo) ] && [ $(git_number_of_stashes) -gt 0 ]; then
    printf "x"
  fi
}
BASH_GIT_HAS_STASHED_COMMIT="$bldgrn\$(bash_git_has_stashed_commit)"

bash_git_has_untracked_files() {
  if [ $(in_git_repo) ] && [ $(git_untracked_files) -gt 0 ]; then
    printf "v"
  fi
}
BASH_GIT_HAS_UNTRACKED_FILES="$bldred\$(bash_git_has_untracked_files)"

bash_git_has_modified_files() {
  if [ $(in_git_repo) ] && [ $(git_modified_files) -gt 0 ]; then
    printf "v"
  fi
}
BASH_GIT_HAS_MODIFIED_FILES="$bldylw\$(bash_git_has_modified_files)"

bash_git_has_staged_files() {
  if [ $(in_git_repo) ] && [ $(git_staged_files) -gt 0 ]; then
    printf "v"
  fi
}
BASH_GIT_HAS_STAGED_FILES="$bldgrn\$(bash_git_has_staged_files)"

BASH_GIT_INFO="$BASH_GIT_IN_MERGE$BASH_GIT_IN_REBASE$BASH_GIT_HAS_STASHED_COMMIT$BASH_GIT_HAS_UNTRACKED_FILES$BASH_GIT_HAS_MODIFIED_FILES$BASH_GIT_HAS_STAGED_FILES"

PS1="$bldcyn\D{%a %b %d, %Y T%H:%M:%S} $BASH_USER:$BASH_DIR$BASH_GIT_BRANCH$BASH_GIT_INFO $txtrst$ "
