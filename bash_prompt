txtblk='\e[0;30m' # Black - Regular
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
txtylw='\e[0;33m' # Yellow
txtblu='\e[0;34m' # Blue
txtpur='\e[0;35m' # Purple
txtcyn='\e[0;36m' # Cyan
txtwht='\e[0;37m' # White
 
bldblk='\e[1;30m' # Black - Bold
bldred='\e[1;31m' # Red
bldgrn='\e[1;32m' # Green
bldylw='\e[1;33m' # Yellow
bldblu='\e[1;34m' # Blue
bldpur='\e[1;35m' # Purple
bldcyn='\e[1;36m' # Cyan
bldwht='\e[1;37m' # White
 
unkblk='\e[4;30m' # Black - Underline
undred='\e[4;31m' # Red
undgrn='\e[4;32m' # Green
undylw='\e[4;33m' # Yellow
undblu='\e[4;34m' # Blue
undpur='\e[4;35m' # Purple
undcyn='\e[4;36m' # Cyan
undwht='\e[4;37m' # White
 
bakblk='\e[40m'   # Black - Background
bakred='\e[41m'   # Red
badgrn='\e[42m'   # Green
bakylw='\e[43m'   # Yellow
bakblu='\e[44m'   # Blue
bakpur='\e[45m'   # Purple
bakcyn='\e[46m'   # Cyan
bakwht='\e[47m'   # White
 
txtrst='\e[0m'    # Text Reset

bash_user_and_dir() {
  printf "$txtred%s:$bldgrn%s $bldblu%s" "$USER" "$PWD"
}

# Git info
source $DOTFILES_INSTALL_DIR/git_status

PROMPT_GIT_BRANCH_PREFIX="$bldwht""("
PROMPT_GIT_BRANCH_SUFFIX="$bldwht"") "
PROMPT_GIT_IN_MERGE="$bldred""x"
PROMPT_GIT_IN_REBASE="$bldylw""x"
PROMPT_GIT_HAS_STASHED_COMMIT="$bldgrn""x"
PROMPT_GIT_HAS_UNTRACKED_FILES="$bldred""v"
PROMPT_GIT_HAS_MODIFIED_FILES="$bldylw""v"
PROMPT_GIT_HAS_STAGED_FILES="$bldgrn""v"

# TODO: This still doesn't work, get it working
bash_git_info() {
  if [ $(in_git_repo) ]; then
    local GIT_PROMPT=""
    # Add the git branch to the prompt
    GIT_PROMPT="$GIT_PROMPT""$PROMPT_GIT_BRANCH_PREFIX"
    GIT_PROMPT="$GIT_PROMPT""$(git_branch)"
    GIT_PROMPT="$GIT_PROMPT""$PROMPT_GIT_BRANCH_SUFFIX"

    # Grab the rebase/stash/merge info
    local GIT_COMMIT_INFO_PROMPT=""
    if [ $(git_in_merge) ]; then
      GIT_COMMIT_INFO_PROMPT=$GIT_COMMIT_INFO_PROMPT"$PROMPT_GIT_IN_MERGE"
    fi
    if [ $(git_in_rebase) ]; then
      GIT_COMMIT_INFO_PROMPT=$GIT_COMMIT_INFO_PROMPT"$PROMPT_GIT_IN_REBASE"
    fi
    if [ $(git_number_of_stashes) -gt 0 ]; then
      GIT_COMMIT_INFO_PROMPT=$GIT_COMMIT_INFO_PROMPT"$PROMPT_GIT_HAS_STASHED_COMMIT"
    fi

    # Grab the modified/staged/untracked file info
    local GIT_FILE_INFO_PROMPT=""
    if [ $(git_untracked_files) -gt 0 ]; then
      GIT_FILE_INFO_PROMPT=$GIT_FILE_INFO_PROMPT"$PROMPT_GIT_HAS_UNTRACKED_FILES"
    fi
    if [ $(git_modified_files) -gt 0 ]; then
      GIT_FILE_INFO_PROMPT=$GIT_FILE_INFO_PROMPT"$PROMPT_GIT_HAS_MODIFIED_FILES"
    fi
    if [ $(git_staged_files) -gt 0 ]; then
      GIT_FILE_INFO_PROMPT=$GIT_FILE_INFO_PROMPT"$PROMPT_GIT_HAS_STAGED_FILES"
    fi

    # Combine the prompts together
    GIT_PROMPT="$GIT_PROMPT""$GIT_COMMIT_INFO_PROMPT""$GIT_FILE_INFO_PROMPT"
    printf "$GIT_PROMPT"
  fi
}

PS1="$bldcyn\D{%a %b %d, %Y T%H:%M:%S} \$(bash_user_and_dir)\$(bash_git_info)$txtrst $ "
